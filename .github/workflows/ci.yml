name: Rust CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: moonrepo/setup-rust@v1.2.1
        
      - name: Install dependencies
        run: |
          rustup update
          cd rusty-counter
          cargo install --locked

      - name: Run tests
        run: cargo test --verbose

      - name: Build Release
        run: cargo build --release

      - name: Package with Cargo
        run: |
          cargo package --no-verify --exclude .github

      - name: Get Package Name and Version
        id: get_package_info
        run: |
          PACKAGE_NAME=$(cargo pkgid | sed -E 's/.*#(.*)-([0-9]+\.[0-9]+\.[0-9]+)$/\1/')
          PACKAGE_VERSION=$(cargo pkgid | sed -E 's/.*#.*-([0-9]+\.[0-9]+\.[0-9]+)$/\1/')
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "Package Name: $PACKAGE_NAME"
          echo "Package Version: $PACKAGE_VERSION"

      - name: Archive the package
        run: |
          # Archive the package directory and create the .tar.gz file
          PACKAGE_DIR="target/package/${PACKAGE_NAME}-${PACKAGE_VERSION}"
          tar -czf "${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz" -C target/package "${PACKAGE_NAME}-${PACKAGE_VERSION}"

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz"
          path: "${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz"

      # - name: Build Docker image
      #   run: |
      #     docker build -t rust-app .

      # - name: Push Docker image to Docker Hub (optional)
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   run: |
      #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      #     docker tag rust-app ${{ secrets.DOCKER_USERNAME }}/rust-app:latest
      #     docker push ${{ secrets.DOCKER_USERNAME }}/rust-app:latest

      # - name: Clean up Docker images
      #   run: docker system prune -f
