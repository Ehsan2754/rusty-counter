name: Rust CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Rust-CI:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Rust
      - name: Set up Rust
        uses: moonrepo/setup-rust@v1.2.1

      # Install dependencies
      - name: Install dependencies
        run: rustup update

      # Run tests
      - name: Run tests
        run: cargo test --verbose

      # Build the application in release mode
      - name: Build Release
        run: cargo build --release

      # # Build Docker image
      # - name: Build Docker image
      #   run: |
      #     docker build -t rust-app .

      # # Upload the Docker image as an artifact
      # - name: Save Docker image as artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: docker-image
      #     path: ./rust-app

      # # Optional: If you want to push the Docker image to Docker Hub
      # - name: Push Docker image to Docker Hub
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   run: |
      #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      #     docker tag rust-app ${{ secrets.DOCKER_USERNAME }}/rust-app:latest
      #     docker push ${{ secrets.DOCKER_USERNAME }}/rust-app:latest

      # # Clean up Docker images
      # - name: Clean up Docker images
      #   run: docker system prune -f

      # Create a GitHub release and upload the built package
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./target/release/rusty-counter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # # Optional: Clean up and remove intermediate Docker files to keep the environment clean
      # - name: Clean up Docker environment
      #   run: |
      #     docker rmi rust-app
